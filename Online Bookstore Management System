CREATE TABLE Authors (
  author_id INT PRIMARY KEY,
  author_name VARCHAR(100)
);

-- Create the Books table
  CREATE TABLE Books (
    book_id INT PRIMARY KEY,
    title VARCHAR(255),
    author_id INT,
    genre VARCHAR(50),
    price DECIMAL(10, 2),
    stock_quantity INT,
    FOREIGN KEY (author_id) REFERENCES Authors(author_id)
);

-- Create the Customers table
  CREATE TABLE Customers (
    customer_id INT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    email VARCHAR(100)
);

-- Create the Orders table
  CREATE TABLE Orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    total_amount DECIMAL(10, 2),
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

-- Create the OrderItems table
  CREATE TABLE OrderItems (
    order_item_id INT PRIMARY KEY,
    order_id INT,
    book_id INT,
    quantity INT,
    subtotal DECIMAL(10, 2),
    FOREIGN KEY (order_id) REFERENCES Orders(order_id),
    FOREIGN KEY (book_id) REFERENCES Books(book_id)
);

-- Insert data into Authors table
  INSERT INTO Authors (author_id, author_name) VALUES
  (1, 'J.K. Rowling'),
  (2, 'George Orwell'),
  (3, 'Jane Austen');

-- Insert data into Books table
  INSERT INTO Books (book_id, title, author_id, genre, price, stock_quantity) VALUES
  (1, 'Harry Potter and the Sorcerer''s Stone', 1, 'Fantasy', 19.99, 100),
  (2, '1984', 2, 'Dystopian', 14.99, 50),
  (3, 'Pride and Prejudice', 3, 'Romance', 12.99, 75);

-- Insert data into Customers table
  INSERT INTO Customers (customer_id, first_name, last_name, email) VALUES
  (1, 'John', 'Doe', 'john@example.com'),
  (2, 'Jane', 'Smith', 'jane@example.com');

-- Insert data into Orders table
  INSERT INTO Orders (order_id, customer_id, order_date, total_amount) VALUES
  (1, 1, '2023-08-15', 32.98),
  (2, 2, '2023-08-16', 19.99);

-- Insert data into OrderItems table
  INSERT INTO OrderItems (order_item_id, order_id, book_id, quantity, subtotal) VALUES
  (1, 1, 1, 2, 39.98),
  (2, 1, 2, 1, 14.99),
  (3, 2, 3, 1, 12.99);

-- Retrieve all books
  SELECT * FROM Books;

-- Retrieve orders for a specific customer
  SELECT * FROM Orders WHERE customer_id = 1;

-- Calculate total sales for each book
  SELECT b.title, SUM(oi.subtotal) AS total_sales
  FROM Books b
  JOIN OrderItems oi ON b.book_id = oi.book_id
  GROUP BY b.title;
